   {/* <DragDropContext onDragEnd={handleDragEnd}>
            {/* Display all the statuses having the given board id */}
            {/* {Object.entries(statusWithTasks?.status).map(([key, status]) => (
              <div
                key={status?.id}
                className="p-4 bg-white m-3 rounded-xl overflow-y-auto scrollbar-thin scrollbar-thumb-gray-500 scrollbar-track-gray-300 scrollbar-thumb-rounded-full scrollbar-track-rounded-full max-h-screen w-96 shadow-md min-h-min"
              >
                <h2 className="font-semibold text-lg capitalize ml-2">
                  {status?.title.split(":")[0]}
                </h2>
                {status && (
                  <Droppable droppableId={status?.id?.toString() || ""}>
                    {(provided) => (
                      <div
                        ref={provided.innerRef}
                        {...provided.droppableProps}
                        className="min-h-[100px]"
                      >
                        {status?.tasks?.map((task, index) => (
                          <Draggable
                            key={task.id}
                            draggableId={task?.id?.toString() || ""}
                            index={index}
                          >
                            {(provided) => (
                              <div
                                className="bg-gray-100 p-2 my-2 rounded-md"
                                ref={provided.innerRef}
                                {...provided.draggableProps}
                                {...provided.dragHandleProps}
                              >
                                {task.title}
                              </div>
                            )}
                          </Draggable>
                        ))}
                        {provided.placeholder}
                      </div>
                    )}
                  </Droppable>
                )}
                <button
                  className="flex focus:outline-none  px-4 py-2 rounded-md w-full hover:bg-gray-200
                  items-center justify-center mt-5 text-gray-500"
                  onClick={() => setShowTaskModel(true)}
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    strokeWidth={1.5}
                    stroke="currentColor"
                    className="w-6 h-6"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M12 6v12m6-6H6"
                    />
                  </svg>

                  <span className="text-lg ml-2">Add Task</span>
                </button>
                <Modal
                  open={showTaskModel}
                  closeCB={() => setShowTaskModel(false)}
                >
                  <CreateTask boardId={id} statusId={status?.id as number} />
                </Modal>
              </div>
            ))}
          </DragDropContext> */} */}
 // <div className="flex mt-5 ">
        //   <DragDropContext onDragEnd={(e) => console.log(e)}>
        //     {/* display all the statuses having the given board id */}
        //     {Object.entries(updatedStatuses).map((status) => (
        //       <div
        //         key={status[1].id}
        //         className="p-4  bg-white m-3 rounded-xl overflow-y-auto scrollbar-thin scrollbar-thumb-gray-500 scrollbar-track-gray-300
        //         scrollbar-thumb-rounded-full scrollbar-track-rounded-full max-h-screen  w-96 shadow-md min-h-min"
        //       >
        //         <h2 className="font-semibold text-lg capitalize ml-2">
        //           {status[1].title.split(":")[0]}
        //         </h2>
        //         <Droppable droppableId={status[1]?.id?.toString() as string}>
        //           {(provided) => {
        //             return (
        //               <div
        //                 // key={status[1].id}
        //                 ref={provided.innerRef}
        //                 {...provided.droppableProps}
        //               >
        //                 {" "}
        //                 {status[1]?.tasks?.map((task, index) => {
        //                   return (
        //                     <Draggable
        //                       key={task.id}
        //                       index={index}
        //                       draggableId={task?.id?.toString() as string}
        //                     >
        //                       {(provided) => {
        //                         return (
        //                           <div
        //                             className="bg-gray-100 p-2 my-2 rounded-md"
        //                             ref={provided.innerRef}
        //                             {...provided.draggableProps}
        //                             {...provided.dragHandleProps}
        //                           >
        //                             {task.title}
        //                           </div>
        //                         );
        //                       }}
        //                     </Draggable>
        //                   );
        //                   // <TaskCard
        //                   //   key={task.id}
        //                   //   title={task.title}
        //                   //   description={task.description}
        //                   //   id={task.id as number}
        //                   //   boardId={task.board as number}
        //                   // />
        //                 })}
        //               </div>
        //             );
        //           }}
        //           {/* <div className="">
        //             {status[1]?.tasks?.map((task) => (
        //               <TaskCard
        //                 key={task.id}
        //                 title={task.title}
        //                 description={task.description}
        //                 id={task.id as number}
        //                 boardId={task.board as number}
        //               />
        //             ))}
        //           </div> */}
        //         </Droppable>
        // <button
        //   className="flex focus:outline-none  px-4 py-2 rounded-md w-full hover:bg-gray-200
        //   items-center justify-center mt-5 text-gray-500"
        //   onClick={() => setShowTaskModel(true)}
        // >
        //   <svg
        //     xmlns="http://www.w3.org/2000/svg"
        //     fill="none"
        //     viewBox="0 0 24 24"
        //     strokeWidth={1.5}
        //     stroke="currentColor"
        //     className="w-6 h-6"
        //   >
        //     <path
        //       strokeLinecap="round"
        //       strokeLinejoin="round"
        //       d="M12 6v12m6-6H6"
        //     />
        //   </svg>

        //   <span className="text-lg ml-2">Add Task</span>
        // </button>
        // <Modal
        //   open={showTaskModel}
        //   closeCB={() => setShowTaskModel(false)}
        // >
        //   <CreateTask boardId={id} statusId={status[1]?.id as number} />
        // </Modal>
        //       </div>
        //     ))}
        //   </DragDropContext>
        // </div>

        dnd logic

        
    // updateTaksOnDnD: (state, action) => {
    //   const { source, destination } = action.payload;

    //   return produce(state, (draftState) => {
    //     const sourceStatus = draftState.statuses.find(
    //       (status) => status.id === parseInt(source.droppableId)
    //     );
    //     const draggedTask = sourceStatus?.tasks?.[source.index];

    //     if (draggedTask) {
    //       draggedTask.status = parseInt(destination.droppableId);
    //       sourceStatus?.tasks?.splice(source.index, 1); // Remove the dragged task from the source status

    //       const destinationStatus = draftState.statuses.find(
    //         (status) => status.id === parseInt(destination.droppableId)
    //       );

    //       if (destinationStatus) {
    //         destinationStatus?.tasks?.splice(destination.index, 0, draggedTask);
    //       }
    //     }
    //   });
    // },